*   What is the purpose of Externalization ?

>>  In Serialization, the responsibility to serialize the object is on JVM and 
    programmer has no control over it. Due to which while serializing the object, 
    JVM will serialize entire object.

    If we want to serialize certain variables only, then we can't do that using
    Serialization as JVM has control over serializing the object.

    This leads to wastage of system memory and bandwidth as we want to serialize
    small data but have to serialize entire object.

    To solve this problem, Externalization is used in which its programmer's 
    responsibility to serialize the object and programmer has full control over it.

___________________________________________________________________________________

*   In Externalization who is responsible to serialize the object ?

>>  In Externalization it is programmer's responsibility to serialize the object
    as programmer has full contol over Serialization of the object.

___________________________________________________________________________________

*   When to go for Externalization over Serialization ?

>>  If there is a requirement in which you want to serialize certain part of the 
    object only and not the entire object, then we should opt for Externalization.

    If there is a requirement in which you want to serialize entire object, then we 
    should opt for Serialization.

___________________________________________________________________________________

*   What are the advantages of Externalization over Serialization ?

>>  Following are the advantages of Externalization over Serialization:

    (1) In Externalization, programmer has full control of serializing the object

    (2) We can serialize either certain part of the object or entire object which
        is not possible in Serialization 

    (3) Since in Externalization we can serialize certain part of object also, it 
        is more efficient than serialization.
        
___________________________________________________________________________________

*   How to perform Externalization ?

>>  
    ```
    /* 
        Account class whose instance variable 'accountID' and 'branchName' are to be 
        serialized and to be stored into a file

        to achieve this, this class has to implement Externalizable interface
    */
    class Account implements Externalizable {

        // only these two instance variable is to be stored
        int accountID;
        String branchName;

        String name;
        double balance;

        /* 
            instance block will be called at the time of de-serialization as new object 
            will be created by JVm
        */
        {
            System.out.println("Account class instance block");
        }

        Account(int accountID, String branchName, String name, double balance) {
            System.out.println("Account class argument constructor");
            this.accountID = accountID;
            this.branchName = branchName;
            this.name = name;
            this.balance = balance;
        }

        /* 
            class implementing Externalizable must have public no-argument constructor 
            as while de-serializing JVM will create this class object and will call 
            no-argument constructor

            If no-argument constructor is not there, then we will get 
            InvalidClassException
        */
        public Account() {
            System.out.println("Account class no-argument constructor");
        }

        /* 
            overriding writeExternal method in which we will define the logic for 
            serializing only required data and not the entire object

            this method will be called be the JVM at the time of serializing this class
            object
        */
        @Override
        public void writeExternal(ObjectOutput out) throws IOException {

            // serializing only certain required instance variables
            out.writeInt(this.accountID);
            out.writeObject(this.branchName);
        }

        /* 
            overriding readExternal method in which we will define the logic for 
            de-serializing data 

            this method will be called be the JVM at the time of de-serializing this 
            class object

            while de-serializing, JVM will create the object of this class and will 
            call this class no-argument constructor and will assign the data that 
            we de-serialized to the variable which we will defne in this method
        */
        @Override
        public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {

            // de-serializing serialized variables and assigning it to respective variables
            this.accountID = in.readInt();
            this.branchName = (String) in.readObject();
        }
    }
    public class Test {
        
        public static void main(String[] args) throws Exception {
            
            // creating Account class object
            Account a1 = new Account(1234, "Hyderabad", "Abhishek", 20000.50);

            System.out.println(a1.accountID + " " + a1.branchName + " " + a1.name + " " + a1.balance);

            FileOutputStream fos = new FileOutputStream("abc.txt");
            ObjectOutputStream oos = new ObjectOutputStream(fos);

            // serializing Account class object variables
            oos.writeObject(a1);

            oos.close();

            FileInputStream fis = new FileInputStream("abc.txt");
            ObjectInputStream ois = new ObjectInputStream(fis);

            // de-serializing Account class object variables
            Account a2 = (Account) ois.readObject();

            /* 
                variables that was serialized at the time of serialization, only
                those variable will have its original value while other variable will 
                have default value
            */
            System.out.println(a2.accountID + " " + a2.branchName + " " + a2.name + " " + a2.balance);

            ois.close();
        }
    }
    ```

___________________________________________________________________________________

*   Why it is necessary for an serialized object to have no-argument constructor
    in case of Externalization ?

>>  In Externalization, instead of serializing objects their variables are 
    serialized due to which at the time of de-serialization JVM has to create a 
    new object so that it can de-serialize the object variables and will assign 
    those variables value to variables of newly created object.

    So, at the time of creating a new object JVM calls public no-argument constructor
    of that class due to which that class must have a no-argument constructor else
    we will get InvalidClassException. 

___________________________________________________________________________________

*   Why 'transient' keyword has no importance in Externalization ?

>>  Becuase in Externalization, entire responsibility of serializing the object
    is of programmer and hence if we declare a variable a transient, still we can 
    serialize and de-serialize that object which was not possible in serialization.

    Hence, 'transient' keyword has no importance in Externalization.

___________________________________________________________________________________

*   What is the difference between Serialization and Externalization ?

>>              Serialization                           Externalization
                                        |
    In Serialization, it is JVM         |   In Externalization, it is programmer's
    responsibility to serialize the     |   responsibility to serialize the object
    objects                             |
                                        |
    In Serialization, programmer doesn't|   In Externalization, programmer has full
    have any control over serializing   |   control over serializing the object
    the objects                         |
                                        |
    In Serialization, entire object     |   In Externalization, we can serialize 
    is serialized and we can't          |   entire object as well part of the 
    serialize part of the object only   |   object based on our requirements
                                        |
    In Serialization, performance is    |   In Externalization, performance is 
    relatively low compare to           |   relatively high compare to 
    Externalization                     |   Serialization
                                        |
    In Serialization, transient keyword |   In Externalization, transient keyword
    plays important role                |   has no importance
                                        |
    In Serialization, while serializing |   In Externalization, as programmer
    child class object if parent class  |   has control over serializing the object,
    object is not Serializable, then    |   if parent class is not Serializable than 
    to JVM will idnore the value of     |   also while serial child object we can
    parent class variable               |   serialize parent class variables
                                        |
    In Serialization, class of the      |   In Externalization, class of the 
    serializing object not required to  |   serializing object must contain 
    contain no-argument constructor     |   public no-argument constructor
                                        |
___________________________________________________________________________________