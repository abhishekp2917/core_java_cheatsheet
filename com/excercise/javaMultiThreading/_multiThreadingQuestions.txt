*   Explain multithreading in Java in detail.

>>  Multithreading is a process of executing multiple threads concurrently within a 
    single process to achieve parallelism. It allows a program to perform multiple tasks 
    simultaneously, improving performance and responsiveness.

    In Java, multithreading is a built-in feature that enables developers to create and 
    manage threads efficiently.

_______________________________________________________________________________________

*   What are the differences between process and thread ?

>>  (1) Definition:

        - Process is an independent program with its own memory and system resources.

        - Thread is a lightweight execution unit within a process that shares its resources.

    (2) Resource Allocation:

        - Process has its own memory space, file handles, and system resources.

        - Thread shares memory and resources of the parent process.

    (3) Creation Overhead:

        - Process creation is slow as it requires allocating separate resources and memory.

        - Thread creation is faster since it shares existing resources of the process.

    (4) Context Switching:

        - Process context switching is expensive as it involves switching memory spaces.

        - Thread context switching is faster as threads share the same address space.

    (5) Isolation:

        - Process are completely isolated from other processes; one process does not 
          affect another.

        - Thread are not isolated; a faulty thread can impact other threads in the 
          same process.

    (6) Example:

        - Process: Running multiple instances of a web browser (Chrome, Firefox).

        - Thread: Multiple browser tabs running within the same browser process.

_______________________________________________________________________________________

*   What are various ways to create a Thread ?

>>  (1) Extending Thread Class:

        - Create a class that extends Thread and override the run() method.

        - Simple to use but prevents extending other classes due to single inheritance.

        Example:    

            MyThread.class:

                ```
                    class MyThread extends Thread {
                        public void run() {
                            System.out.println("Thread is running...");
                        }
                    }
                ```

            Main.class:
                
                ```
                    public class Main {
                        public static void main(String[] args) {
                            MyThread t1 = new MyThread();
                            t1.start();  // Starts the thread
                        }
                    }
                ```

    (2) Implementing Runnable Interface:

        - Create a class that implements Runnable and override the run() method.

        - Create a Thread object and pass an instance of this Runnable implementation 
          class to it via Constructor.

        - Preferred approach as it allows multiple inheritance.

        Example:

            MyRunnable.class:

                ```
                    class MyRunnable implements Runnable {
                        public void run() {
                            System.out.println("Thread is running...");
                        }
                    }
                ```

            Main.class:

                ```
                    public class Main {
                        public static void main(String[] args) {
                            Thread t1 = new Thread(new MyRunnable());
                            t1.start();
                        }
                    }
                ```

    (3) Using Thread with Anonymous Class:

        - Directly create a Thread object and override run() using an anonymous class.

        - Useful for short-lived threads without needing a separate class.

        Example:

            Main.class:

                ```
                    public class Main {
                        public static void main(String[] args) {
                            Thread t1 = new Thread() {
                                public void run() {
                                    System.out.println("Thread is running...");
                                }
                            };
                            t1.start();
                        }
                    }
                ```

    (4) Using Runnable with Anonymous Class:

        - Pass an anonymous Runnable implementation to a Thread object.

        Example:

            Main.class:

                ```
                    public class Main {
                        public static void main(String[] args) {
                            Thread t1 = new Thread(new Runnable() {
                                public void run() {
                                    System.out.println("Thread is running...");
                                }
                            });
                            t1.start();
                        }
                    }
                ```

    (5) Using Lambda Expression (Java 8+):

        - Instead of an anonymous class, use a lambda expression to simplify Runnable.

        Example:

            Main.class:

                ```
                    public class Main {
                        public static void main(String[] args) {
                            Thread t1 = new Thread(() -> System.out.println("Thread is running..."));
                            t1.start();
                        }
                    }
                ```

    (6) Using Callable and FutureTask (For Returning Values):

        - Callable<T> can return a result and throw exceptions.

        - Use FutureTask to handle execution.

        - Useful when you need to return a result from a thread.

        Example:

            ```
                import java.util.concurrent.Callable;
                import java.util.concurrent.FutureTask;

                public class Main {
                    public static void main(String[] args) throws Exception {
                        Callable<Integer> callable = () -> {
                            System.out.println("Thread is running...");
                            return 10;
                        };

                        FutureTask<Integer> futureTask = new FutureTask<>(callable);
                        Thread t1 = new Thread(futureTask);
                        t1.start();

                        // Get result after execution
                        System.out.println("Result: " + futureTask.get());
                    }
                }
            ```

    (7) Using ExecutorService (Thread Pool):

        - ExecutorService manages a pool of threads.

        - Submit tasks instead of manually creating threads.
        
        - Efficient for handling multiple threads with controlled execution.

        Example:

            ```
                import java.util.concurrent.ExecutorService;
                import java.util.concurrent.Executors;

                public class Main {
                    public static void main(String[] args) {
                        ExecutorService executor = Executors.newFixedThreadPool(2);

                        executor.execute(() -> System.out.println("Thread 1 is running..."));
                        executor.execute(() -> System.out.println("Thread 2 is running..."));

                        executor.shutdown();
                    }
                }
            ```

_______________________________________________________________________________________

*   What are the differences between Callable and Runnable ?

>>  (1) Functional Interface:

        - Both are functional interfaces, so they can be used with lambda expressions.

        - However, Callable is more suitable when you need to return a result or throw 
          an exception.

    (2) Return Type:

        - Runnable does not return a result. Its run() method returns void.

        - Callable returns a result. Its call() method returns a value of type V.

    (3) Exception Handling:
    
        - Runnable cannot throw checked exceptions from the run() method.

        - Callable can throw checked exceptions from the call() method.

    (4) Use with ExecutorService:

        - Runnable tasks submitted to an ExecutorService return a Future<?>, but the 
          result is always null unless you manually set a result.

        - Callable tasks return a Future<V>, where V is the result of the call() method.

    (5) Use Case:

        - Use Runnable when you just want to run a task in the background and don’t 
          need a result.

        - Use Callable when you want the task to produce a result or may throw an exception.

    (6) Example:

        - Runnable Example – No return, no checked exception

            Main.class:

                ```
                    import java.util.concurrent.ExecutorService;
                    import java.util.concurrent.Executors;

                    public class Main {
                        public static void main(String[] args) {
                            Runnable task = () -> {
                                System.out.println("Runnable is running...");
                            };
                            ExecutorService executor = Executors.newSingleThreadExecutor();
                            executor.submit(task); // returns Future<?> but result is always null
                            executor.shutdown();
                        }
                    }
                ```
        
        - Callable Example – Returns result, can throw exception

            Main.class:

                ```
                    import java.util.concurrent.*;

                    public class Main {
                        public static void main(String[] args) {
                            Callable<String> task = () -> {
                                Thread.sleep(2000); // simulate delay
                                return "Callable completed!";
                            };
                            ExecutorService executor = Executors.newSingleThreadExecutor();
                            Future<String> future = executor.submit(task);
                            try {
                                String result = future.get(); // blocks until result is available
                                System.out.println("Result: " + result);
                            } catch (InterruptedException | ExecutionException e) {
                                e.printStackTrace();
                            } finally {
                                executor.shutdown();
                            }
                        }
                    }
                ```

_______________________________________________________________________________________

*   Explain Thread Lifecycle in detail.

>>  A thread in Java goes through five states during its lifecycle:

        (1) New (Created)
        (2) Runnable
        (3) Blocked (Waiting for a resource)
        (4) Waiting
        (5) Timed Waiting 
        (6) Terminated (Dead)

    (1) New (Created) State:

        - A thread is in the new state when it is created but has not started execution yet.

        - It remains in this state until the start() method is called.

        Example:

            ```
                Thread t1 = new Thread(() -> System.out.println("Thread Running"));
            ```

    (2) Runnable State:

        - After calling start(), the thread moves to the runnable state.

        - The thread is ready to run, but CPU scheduling determines when it will execute.

        - The thread may or may not be running at a given moment.

        Example:

            ```
                Thread t1 = new Thread(() -> System.out.println("Thread Running"));
                t1.start();  // Moves to the Runnable state
            ```

    (3) Blocked State:

        - A thread moves to the blocked state when it tries to access a synchronized 
          resource that is currently held by another thread.

        - It remains blocked until the resource is released.

        Example:

            SharedResource.class:

                ```
                    class SharedResource {

                        synchronized void method() {
                            System.out.println(Thread.currentThread().getName() + " is executing...");
                            try { Thread.sleep(1000); } catch (InterruptedException e) {}
                        }
                    }
                ```
            
            Main.class:

                ```
                    public class Main {
                        public static void main(String[] args) {
                            SharedResource resource = new SharedResource();

                            Thread t1 = new Thread(() -> resource.method(), "Thread-1");
                            Thread t2 = new Thread(() -> resource.method(), "Thread-2");

                            t1.start();
                            t2.start();  // t2 will be blocked until t1 releases the lock
                        }
                    }
                ```

    (4) Waiting State:

        - A thread moves to the waiting when it is waiting for another thread's action.

        - A thread enters this state using wait(), join(), or park() and stays here until 
          another thread notifies it.

        Example:

            Task.class:

                ```
                    class Task {

                        synchronized void doWork() throws InterruptedException {
                            System.out.println("Waiting for notification...");
                            wait();  // Moves to Waiting state
                            System.out.println("Resumed after notification");
                        }

                        synchronized void notifyTask() {
                            notify();  // Wakes up waiting thread
                        }
                    }
                ```

                ```
                    public class Main {
                        public static void main(String[] args) throws InterruptedException {
                            Task task = new Task();

                            Thread t1 = new Thread(() -> {
                                try { 
                                    // task t1 moves to the waiting state
                                    task.doWork(); 
                                } 
                                catch (InterruptedException e) {}
                            });

                            Thread t2 = new Thread(() -> {
                                try { 
                                    // task t2 notifies t1 to wakes up waiting thread  
                                    task.notifyTask(); 
                                } 
                                catch (InterruptedException e) {}
                            });

                            // t1 waits indefinitely until another thread calls notify().
                            t1.start();

                            Thread.sleep(2000); // Simulate some delay

                            t2.start();
                        }
                    }
                ```

    (5) Timed Waiting State:

        - A thread moves to timed waiting if it calls sleep(), wait(timeout), or 
          join(timeout).

        - It will automatically wake up after the time expires.

        Example:

            ```
                public class Main {
                    public static void main(String[] args) throws InterruptedException {
                        Thread t1 = new Thread(() -> {
                            try {
                                System.out.println("Thread Sleeping...");
                                Thread.sleep(3000);  // Moves to Timed Waiting
                                System.out.println("Thread Awake...");
                            } catch (InterruptedException e) {}
                        });

                        t1.start();
                    }
                }
            ```

    (6) Terminated (Dead) State:

        - A thread moves to the terminated state when it completes execution or it is 
          manually stopped using stop() (deprecated).

        - A terminated thread cannot be restarted.

        Example:

                ```
                    public class Main {
                        public static void main(String[] args) {
                            Thread t1 = new Thread(() -> System.out.println("Thread Executed"));
                            t1.start();

                            try { 
                                // main thread will wait until t1 completes  
                                t1.join(); 
                            } catch (InterruptedException e) {}

                            // Once t1 execution completes, the thread is terminated.
                            System.out.println("Thread is Terminated");
                        }
                    }
                ```

_______________________________________________________________________________________

*   Which methods affect Thread states ?

>>  (1) start(): 

        - Moves from NEW → RUNNABLE
    
    (2) sleep(ms), wait(ms), join(ms): 	
    
        - Moves from RUNNING → TIMED WAITING

    (3) wait(), join():	
    
        - Moves from RUNNING → WAITING
    
    (4) notify():	
    
        - Moves from WAITING → RUNNABLE

    (5) synchronized:	
    
        - Moves to BLOCKED if another thread holds the lock

    (6) stop()(Deprecated): 
        
        - Moves directly to TERMINATED

_______________________________________________________________________________________

*   Explain volatile keyword in detail.

>>  volatile is a keyword in Java used with instance variables in multi-threaded programming.

    It ensures visibility of changes made by one thread to other threads immediately.

    Use volatile when you want all threads to see the latest value of a variable but don’t need 
    atomicity or complex synchronization.

    Problem Without volatile:

        - In a multi-threaded environment, every thread may keep a local copy of a 
          variable for performance reasons.

        - If one thread changes the variable, other threads might not see the updated value 
          because they are reading their local cached copy — leading to data inconsistency.

    How it Works:

        - When a variable is declared as volatile its value is always read directly from 
          the main memory (RAM).

        - Its updated value is immediately written back to the main memory after modification.

        - No caching happens — every read/write is from/to the main memory.

    Example:
            
        - Without volatile, reader thread may never see updated flag.

        - With volatile, change done by writer thread is visible immediately to reader thread.

        SharedResource.class:

            ```
                class SharedResource {
                    volatile boolean flag = false;

                    void writer() {
                        flag = true; // Written to main memory directly
                    }

                    void reader() {
                        while (!flag) {  // Always reads latest value from main memory
                            // Waiting for flag to become true
                        }
                        System.out.println("Flag is true, exiting loop.");
                    }
                }
            ```

_______________________________________________________________________________________

*   Explain ThreadLocal in detail.

>>  ThreadLocal is a special class in Java (java.lang.ThreadLocal) that provides thread-local storage.

    It allows you to create variables where each thread has its own separate copy of that variable.

    No thread can see or modify another thread’s ThreadLocal variable.

    Why do we need ThreadLocal:
    
        - In multi-threaded applications sometimes, you want to avoid sharing data between threads such as 
        User session data, Transaction ID specific to a thread etc.

        - Using ThreadLocal solves this without synchronization because each thread gets its own independent copy.

    How it works:

        - Each Thread object has a private ThreadLocalMap.

        - When you call threadLocal.set(value), that value is stored inside the current thread's ThreadLocalMap.

        - When you call threadLocal.get(), value is retrieved from that current thread’s ThreadLocalMap.

    Example:

        UserContext.class:

            ```
                class UserContext {
                    private static ThreadLocal<String> userName = new ThreadLocal<>();

                    public static void setUser(String name) {
                        userName.set(name);  // Store user in current thread's ThreadLocalMap
                    }

                    public static String getUser() {
                        return userName.get();  // Retrieve user from current thread's ThreadLocalMap
                    }
                }
            ```

        Main.class:
        
            ```
                public class Main {
                    public static void main(String[] args) {
                        Runnable task1 = () -> {
                            UserContext.setUser("Alice");
                            System.out.println(Thread.currentThread().getName() + " User: " + UserContext.getUser());
                        };

                        Runnable task2 = () -> {
                            UserContext.setUser("Bob");
                            System.out.println(Thread.currentThread().getName() + " User: " + UserContext.getUser());
                        };

                        new Thread(task1, "Thread-1").start();
                        new Thread(task2, "Thread-2").start();
                    }
                }
            ```

        - Even though userName is a static variable, both threads have different copies.
        
        Output:

            ```
                Thread-1 User: Alice
                Thread-2 User: Bob
            ```
            
_______________________________________________________________________________________















