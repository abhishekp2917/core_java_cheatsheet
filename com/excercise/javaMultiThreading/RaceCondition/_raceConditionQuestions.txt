
*   Explain the Race conditions & Data inconsistency in detail.

>>  A race condition occurs when two or more threads try to read, write, or update a 
    shared resource concurrently, leading to unpredictable behavior.

    This happens when operation is not atomic (executes completely or not at all).

    Example:

        Counter.class:

            ```
                class Counter {
                    private int count = 0;

                    public void increment() {
                        count++;  // Not thread-safe
                    }

                    public int getCount() {
                        return count;
                    }
                }
            ```

        Main.class:

            - Since count++ is not an atomic operation, some increments are lost.

            - The final result should be 2000, but due to the race condition, it is unpredictable.

            ```
                public class Main {
                    public static void main(String[] args) {
                        Counter counter = new Counter();

                        // Thread 1 increments the counter 1000 times
                        Thread t1 = new Thread(() -> {
                            for (int i = 0; i < 1000; i++) {
                                counter.increment();
                            }
                        });

                        // Thread 2 increments the counter 1000 times
                        Thread t2 = new Thread(() -> {
                            for (int i = 0; i < 1000; i++) {
                                counter.increment();
                            }
                        });

                        t1.start();
                        t2.start();

                        try {
                            t1.join();
                            t2.join();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        // Expected: 2000, but output may vary due to race conditions
                        System.out.println("Final Counter Value: " + counter.getCount());
                    }
                }
            ```

        Output:

            ```
                Final Counter Value: 1897  // (May vary)
            ```

_______________________________________________________________________________________

*   How to Prevent Race Conditions & Data Inconsistency ?

>>  (1) Using Synchronized Methods:

        - Ensures only one thread at a time can access the method.

        Example:

            ```
                class Counter {
                    private int count = 0;

                    public synchronized void increment() {
                        count++;  // Now thread-safe
                    }

                    public int getCount() {
                        return count;
                    }
                }
            ```

    (2) Using Synchronized Blocks:

        - Allows fine-grained locking for specific parts of the code.

        Example:

            ```
                class Counter {
                    private int count = 0;

                    public void increment() {
                        synchronized (this) {
                            count++;
                        }
                    }
                }
            ```

    (3) Using Atomic Variables (Preferred for Performance):

        - Uses AtomicInteger, which provides thread-safe atomic operations.

        Example:

            ```
                import java.util.concurrent.atomic.AtomicInteger;

                class Counter {
                    private AtomicInteger count = new AtomicInteger(0);

                    public void increment() {
                        count.incrementAndGet();  // Atomic operation
                    }

                    public int getCount() {
                        return count.get();
                    }
                }
            ```
    
    (4) Using Locks (ReentrantLock):

        - More flexible than synchronized, allows better control.

        Example:

            ```
                import java.util.concurrent.locks.Lock;
                import java.util.concurrent.locks.ReentrantLock;

                class Counter {
                    private int count = 0;
                    private Lock lock = new ReentrantLock();

                    public void increment() {
                        lock.lock();
                        try {
                            count++;
                        } finally {
                            lock.unlock();
                        }
                    }
                }
            ```

    (5) Using volatile (Only for Visibility, Not Atomicity):

        - Ensures latest value is always visible across threads but does not solve 
          race conditions.

        Example:

            ```
                class SharedResource {
                    private volatile boolean flag = false;

                    public void setFlag() {
                        flag = true;  // Latest value is visible across threads
                    }
                }
            ```

_______________________________________________________________________________________

*   Explain synchronized keyword in detail and and how it prevents race condition and 
    data inconsistency ?

>>  The synchronized keyword is used to prevent race conditions and ensure thread safety 
    by allowing only one thread at a time to execute a critical section of code.

    It prevents multiple threads from reading and modifying the same variable simultaneously,
    thereby resolving race condition and data inconsistency.

    Types of Synchronization:

        (1) Method Synchronization:
            
            - The synchronized keyword locks the entire method on the calling object, so only one 
            thread can execute it at a time.

            - If Thread A is executing increment(), Thread B must wait until Thread A finishes.

            Example: 

                ```
                    class Counter {
                        private int count = 0;

                        public synchronized void increment() {  // Synchronized method
                            count++;  
                        }

                        public int getCount() {
                            return count;
                        }
                    }
                ```

        (2) Block Synchronization:

            - Instead of locking the entire method, we lock only a critical section of the code.

            - It is more efficient than method synchronization because it locks only the critical 
              part of the code, allowing other non-synchronized methods to execute freely.

            Example: 

                - Thread-1 enters the synchronized (this) block → it locks the object (this).

                - Thread-2 also wants to enter doSynchronizedWork() → must wait, because it's 
                  trying to acquire the same lock (this).

                - Thread-3 is calling an unsynchronized method, so it executes immediately — not 
                  blocked, because it doesn’t try to acquire the lock.

                MyTask.class:

                    ```
                        public class MyTask {

                            public void unsynchronizedMethod() {
                                System.out.println(Thread.currentThread().getName() + " is in unsynchronized method.");
                            }

                            public void doSynchronizedWork() {
                                synchronized (this) {
                                    System.out.println(Thread.currentThread().getName() + " entered synchronized block.");
                                    try { Thread.sleep(2000); } catch (InterruptedException e) {}
                                    System.out.println(Thread.currentThread().getName() + " exiting synchronized block.");
                                }
                            }
                        }
                    ```
                
                Main.class:

                    ```
                        public class Main {
                            public static void main(String[] args) {
                                MyTask task = new MyTask();

                                Thread t1 = new Thread(() -> task.doSynchronizedWork(), "Thread-1");
                                Thread t2 = new Thread(() -> task.doSynchronizedWork(), "Thread-2");
                                Thread t3 = new Thread(() -> task.unsynchronizedMethod(), "Thread-3");

                                t1.start();
                                t2.start();
                                t3.start();
                            }
                        }
                    ```

        (3) Static Synchronization:

            - Used when multiple threads access a shared static resource.

            - synchronized on a static method locks the entire class (SharedResource.class), not 
              just an object instance.

            Example: 

                ```
                    class SharedResource {
                        private static int count = 0;

                        public static synchronized void increment() {  // Static synchronized method
                            count++;
                        }

                        public static int getCount() {
                            return count;
                        }
                    }
                ```

    Limitations:

        (1) Performance Overhead:

            - Synchronization reduces performance due to locking and context switching.

            - It is slower than atomic operations (AtomicInteger).

        (2) Deadlocks:

            - If two threads wait for each other to release a lock, a deadlock occurs.

        (3) Fairness Issue:

            - No guarantee of fairness—some threads may wait indefinitely while others 
              keep acquiring locks.

_______________________________________________________________________________________

*   Explain Atomic Variables in detail.

>>  Java provides atomic variables to perform thread-safe operations without using locks. 

    Atomic variables provide a lock-free alternative using CPU-level atomic operations 
    (like CAS – Compare And Swap).

    It is recommended when only a single variable or field needs atomic updates, not complex ones.
    
    How it Works:
        
        - Atomic variables avoid race conditions using Compare And Swap (CAS):

            - Read the current value
            - Compute the new value
            - Use CAS instruction to update the variable only if the value is still the same
            - If another thread modifies the value before the CAS operation succeeds, it retries 
              until successful.

    How CAS Works:

        - Here if another thread changes count before compareAndSet() succeeds, the loop retries until 
          successful.

        ```
            while (true) {
                int existingValue = count.get();  // Step 1: Read current value
                int newValue = existingValue + 1; // Step 2: Compute new value
                if (count.compareAndSet(existingValue, newValue)) { // Step 3: CAS operation
                    break;
                }
            }
        ```

    Types of Atomic Variables:

        - Java provides atomic classes for different primitive types and objects:

            (1) AtomicInteger: Atomic operations for int values
            
            (2) AtomicLong: Atomic operations for long values
            
            (3) AtomicBoolean: Atomic operations for boolean values
            
            (4) AtomicReference<T>:	Atomic operations for objects of type T
            
            (5) AtomicIntegerArray: Atomic operations for an int[] array
            
            (6) AtomicLongArray: Atomic operations for a long[] array
            
            (7) AtomicReferenceArray<T>: Atomic operations for an array of objects

    Example: AtomicInteger

        Counter.class:

            ```
                import java.util.concurrent.atomic.AtomicInteger;

                class Counter {
                    private AtomicInteger count = new AtomicInteger(0);

                    public void increment() {
                        count.incrementAndGet();  // Atomic increment
                    }

                    public int getCount() {
                        return count.get();
                    }
                }
            ```

        Main.class:

            ```
                public class Main {
                    public static void main(String[] args) throws InterruptedException {
                        Counter counter = new Counter();

                        Thread t1 = new Thread(() -> {
                            for (int i = 0; i < 1000; i++) counter.increment();
                        });

                        Thread t2 = new Thread(() -> {
                            for (int i = 0; i < 1000; i++) counter.increment();
                        });

                        t1.start();
                        t2.start();

                        t1.join();
                        t2.join();

                        System.out.println("Final Count: " + counter.getCount());  // Always 2000
                    }
                }
            ```

    Example: AtomicReference

        User.class:

            ```
                class User {
                    String name;
                    User(String name) { this.name = name; }
                }
            ```

        Main.class:

            ```
                import java.util.concurrent.atomic.AtomicReference;

                public class Main {
                    public static void main(String[] args) {
                        AtomicReference<User> userRef = new AtomicReference<>(new User("Alice"));

                        // Atomically update reference
                        userRef.compareAndSet(userRef.get(), new User("Bob"));

                        System.out.println("Updated user: " + userRef.get().name); // Bob
                    }
                }
            ```

_______________________________________________________________________________________