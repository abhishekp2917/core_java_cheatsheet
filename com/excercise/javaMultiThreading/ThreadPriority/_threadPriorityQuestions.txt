
*   Explain Thread Priority in detail.

>>  Thread priority determines the relative importance of a thread in scheduling.

    Threads with higher priority get more CPU time than lower-priority threads, but it 
    does not guarantee execution order.

    The Java thread scheduler uses preemptive scheduling and time slicing based on priority.

    Default Thread Priorities:

        - Every thread in Java has a priority ranging from 1 to 10.

        - The Thread class defines three priority constants:

            (1) Thread.MIN_PRIORITY - 1: Lowest priority
            
            (2) Thread.NORM_PRIORITY - 5: Default priority (assigned to threads by default)
            
            (3) Thread.MAX_PRIORITY	- 10: Highest priority

        Example:

            ```
                public class Main {
                    public static void main(String[] args) {

                        Thread t = new Thread(() -> System.out.println("Thread running..."));
                        System.out.println("Default Priority: " + t.getPriority()); // Output: 5 (NORM_PRIORITY)
                    }
                }
            ```

_______________________________________________________________________________________

*   Does higher Priority guarantee execution order ?

>>  No, thread priority does not guarantee execution order.

    The thread scheduler decides which thread gets CPU time based on priority and other 
    factors like OS scheduling policies.

    Even if a thread has a higher priority, it may not always execute first.

    Example: 

        MyThread.class:

            ```
                class MyThread extends Thread {

                    public void run() {
                        for (int i = 0; i < 5; i++) {
                            System.out.println(Thread.currentThread().getName() + " is running...");
                        }
                    }
                }
            ```

        Main.class:

            ```
                public class Main {
                    public static void main(String[] args) {
                        MyThread t1 = new MyThread();
                        MyThread t2 = new MyThread();
                        
                        t1.setPriority(Thread.MIN_PRIORITY); // Priority = 1
                        t2.setPriority(Thread.MAX_PRIORITY); // Priority = 10
                        
                        t1.start();
                        t2.start();
                    }
                }
            ```

        Output (May Vary):

            - Even though Thread-1 has higher priority, Thread-0 still runs due to 
              thread scheduling behavior.

            ```
                Thread-0 is running...
                Thread-1 is running...
                Thread-1 is running...
                Thread-1 is running...
                Thread-0 is running...
            ```

_______________________________________________________________________________________

*   How Thread scheduler uses Priority ?

>>  The thread scheduler is part of the OS and JVM.

    It uses two mechanisms to manage CPU time among threads:

    (1) Preemptive Scheduling:

        - The highest-priority thread gets CPU time whenever it is ready.

        - If a higher-priority thread becomes available, it preempts (interrupts) 
          lower-priority threads.

    (2) Time-Slicing (Round-Robin):

        - If multiple threads have the same priority, CPU time is divided equally 
          among them in a round-robin fashion.

        Example: 

            MyThread.class:

                ```
                    class MyThread extends Thread {

                        public void run() {
                            for (int i = 0; i < 3; i++) {
                                System.out.println(Thread.currentThread().getName() + " executing...");
                            }
                        }
                    }
                ```
            
            Main.class:

                ```
                    public class Main {
                        public static void main(String[] args) {
                            MyThread t1 = new MyThread();
                            MyThread t2 = new MyThread();
                            MyThread t3 = new MyThread();
                            
                            // All threads have the same priority
                            t1.setPriority(Thread.NORM_PRIORITY);  
                            t2.setPriority(Thread.NORM_PRIORITY);  
                            t3.setPriority(Thread.NORM_PRIORITY);  
                            
                            t1.start();
                            t2.start();
                            t3.start();
                        }
                    }
                ```

            Output (May Vary):

                - All threads have equal CPU time as they have the same priority.

                ```
                    Thread-0 executing...
                    Thread-1 executing...
                    Thread-2 executing...
                    Thread-0 executing...
                    Thread-1 executing...
                    Thread-2 executing...
                ```

_______________________________________________________________________________________

*   What are the best practices for using Thread Priority ?

>>  Use priorities wisely. Don't rely on them to control execution order.

    Do not assume high-priority threads will always execute first. Scheduling depends on
    OS and JVM.

    Prefer using Thread.NORM_PRIORITY (default priority) unless necessary.
    
    For critical tasks, use proper thread synchronization instead of priority.

_______________________________________________________________________________________
