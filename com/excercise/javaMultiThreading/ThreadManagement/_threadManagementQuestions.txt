
*   Explain join() method in detail.

>>  The join() method is used to pause the execution of the current thread until the 
    specified thread has completed its execution.

    How it Works:
        
        - The calling thread pauses until the target thread completes.

        - If a timeout is specified, the calling thread will resume after the given 
          time even if the target thread hasnâ€™t finished.

        - If the target thread is already finished, join() returns immediately.

        - It must be called on a started thread (t.start()), otherwise, it has no effect.

    Example: Using join()

        MyThread.class:

            ```
                class MyThread extends Thread {
                    
                    public void run() {
                        for (int i = 1; i <= 3; i++) {
                            System.out.println(Thread.currentThread().getName() + " - Count: " + i);
                            try {
                                Thread.sleep(1000);  // Simulate some work
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            ```

        - Since t1.join() is called on Main thread, Main thread is a calling Thread and 
          t1 is a target thread.

        Main.class:

            ```
                public class Main {

                    public static void main(String[] args) {
                        MyThread t1 = new MyThread();
                        MyThread t2 = new MyThread();

                        t1.start();
                        try {
                            t1.join();  // Main thread waits for t1 to finish
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        // t2 starts only after t1 is finished since Main thread is waiting
                        t2.start();  
                    }
                }
            ```
        
        Output:

            ```
                Thread-0 - Count: 1
                Thread-0 - Count: 2
                Thread-0 - Count: 3
                Thread-1 - Count: 1
                Thread-1 - Count: 2
                Thread-1 - Count: 3
            ```

    Example: Using join(long millis)

        - Since join(2000) allows waiting only for 2 seconds, the main thread resumes 
          execution before t1 is finished.

        Main.class:
    
            ```
                public class Main {
                    public static void main(String[] args) {
                        MyThread t1 = new MyThread();
                        t1.start();

                        try {
                            t1.join(2000);  // Main thread waits at most 2 seconds for t1
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        System.out.println("Main thread resumes execution.");
                    }
                }
            ```

        Output:

            ```
                Thread-0 - Count: 1
                Thread-0 - Count: 2
                Main thread resumes execution.
                Thread-0 - Count: 3
                Thread-0 - Count: 4
                Thread-0 - Count: 5
            ```

_______________________________________________________________________________________

*   Explain wait() method in detail.

>>  The wait() method is used for inter-thread communication. 
    
    It causes the current thread to release the lock and enter a waiting state until 
    another thread notifies it using notify() or notifyAll().

    How it Works:

        - Must be called within a synchronized block or method, otherwise it throws 
          IllegalMonitorStateException.

        - The thread calling wait() releases the lock (monitor) of the object 
          and enters a waiting state.

        - Another thread must call notify() or notifyAll() to wake up the waiting thread.

        - Once notified, the waiting thread reacquires the lock before resuming execution.

    Example: Using wait()

        Task.class:

            ```
                class Task {
                    public synchronized void doTask() {
                        System.out.println("Task started...");
                        try {
                            wait();  // The thread waits here until it's notified
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        System.out.println("Task resumed after notification!");
                    }

                    public synchronized void completeTask() {
                        System.out.println("Task completed. Notifying...");
                        notify();  // Notify the waiting thread to continue
                    }
                }
            ```
        
        Main.class:

            ```
                public class Main {
                    public static void main(String[] args) {
                        Task task = new Task();

                        Thread t1 = new Thread(task::doTask);
                        Thread t2 = new Thread(task::completeTask);

                        t1.start();
                        
                        try {
                            Thread.sleep(3000);  // Simulate some delay before notifying
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        
                        t2.start();
                    }
                }
            ```

        Output:

            ```
                Task started...
                (Task is waiting...)
                Task completed. Notifying...
                Task resumed after notification!

            ```

    Example: Using wait(long millis)

        TimerTask.class:

            ```
                class TimerTask {
                    public synchronized void startTask() {
                        System.out.println("Task started...");
                        try {
                            wait(3000);  // Wait for 3 seconds
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        System.out.println("Task completed after waiting.");
                    }
                }
            ```
        
        Main.class:
        
            ```
                public class Main {
                    public static void main(String[] args) {
                        TimerTask task = new TimerTask();
                        Thread t1 = new Thread(task::startTask);
                        t1.start();
                    }
                }
            ```
        Output

            ```
                Task started...
                (Task waits for 3 seconds)
                Task completed after waiting.
            ```

_______________________________________________________________________________________

*   Explain sleep() method in detail.

>>  The sleep() method is used to pause the execution of the current thread for a 
    specified period. 
    
    It belongs to the Thread class and allows a thread to go into a timed waiting state.

    How it Works:

        - The thread executing sleep() pauses execution for the given duration.

        - It does not release any locks if the thread is in a synchronized block.

        - The thread resumes execution after the sleep time expires or if interrupted.

    Example: Using sleep()

        Main.class:

            ```
                public class Main {
                    public static void main(String[] args) {
                        System.out.println("Task started...");
                        
                        try {
                            Thread.sleep(3000);  // Pauses execution for 3 seconds
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        
                        System.out.println("Task completed after sleep.");
                    }
                }
            ```
        
        Output:

            ```
                Task started...
                (Task pauses for 3 seconds)
                Task completed after sleep.
            ```

    Example: Handling InterruptedException

        - If another thread calls interrupt() on a sleeping thread, it throws InterruptedException.

        Task.class:

            ```
                class Task implements Runnable {
                    public void run() {
                        try {
                            System.out.println("Thread sleeping...");
                            Thread.sleep(5000);
                            System.out.println("Thread woke up!");
                        } catch (InterruptedException e) {
                            System.out.println("Thread was interrupted!");
                        }
                    }
                }
            ```
        
        Main.class:

            ```
                public class Main {
                    public static void main(String[] args) {
                        Thread t = new Thread(new Task());
                        t.start();

                        try {
                            Thread.sleep(2000);  // Main thread waits 2 seconds before interrupting
                            t.interrupt();       // Interrupt the sleeping thread
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            ```
            
        Output:

            ```
                Thread sleeping...
                Thread was interrupted!
            ```

_______________________________________________________________________________________

*   Explain yield() method in detail.

>>  yield() is a static method in the Thread class. 

    It's a hint to the thread scheduler that the current thread is willing to pause and 
    give a chance for other threads of the same priority to execute.

    Itâ€™s important to note that yield() is just a request to the scheduler and not a guarantee.

    What Actually Happens When We Call yield()?
        
        - The current running thread moves from Running state to Runnable state.

        - The thread scheduler is free to pick any thread from the Runnable pool (could 
          be the same thread again).

        - No blocking or waiting as it's a very lightweight pause.

    When is yield() Used?

        - When you want to avoid starvation (letting other equal-priority threads run).

        - For fine-tuning multi-threaded programs (but rarely used in practice).        

    Example:

        MyThread.class:

            ```
                class MyThread extends Thread {
                    public void run() {
                        for (int i = 1; i <= 5; i++) {
                            System.out.println(Thread.currentThread().getName() + " : " + i);
                            Thread.yield(); // Hint to scheduler
                        }
                    }
                }
            ```

        Main.class:

            ```
                public class Main {
                    public static void main(String[] args) {
                        MyThread t1 = new MyThread();
                        MyThread t2 = new MyThread();

                        t1.start();
                        t2.start();
                    }
                }
            ```

        Possible Output:

            ```
                Thread-0 : 1
                Thread-1 : 1
                Thread-0 : 2
                Thread-1 : 2
                Thread-0 : 3
                Thread-1 : 3
                Thread-0 : 4
                Thread-1 : 4
                Thread-0 : 5
                Thread-1 : 5
            ```

_______________________________________________________________________________________

*   What are the differences between join(), wait() and sleep() method ?

>>  (1) Purpose:

        - join() makes the current thread wait until another thread (on which join() is called) 
          finishes execution.

        - wait() makes the current thread wait until another thread calls notify() or notifyAll() 
          on the same object.

        - sleep() pauses the execution of the current thread for a specified duration but does 
          not release any lock if held.

    (2) Lock Handling:

        - join() does not release any lock while waiting for the other thread to finish.

        - wait() releases the lock so that other threads can acquire it.

        - sleep() does not release any lock if it is inside a synchronized block.

    (3) Where it is used:

        - join() used when one thread depends on the completion of another thread.

        - wait() used in inter-thread communication (Producer-Consumer problems, etc.).

        - sleep() used when a thread needs to pause execution for a certain period.

    (4) How it resumes:

        - join() resumes when the target thread completes execution.

        - wait() resumes when another thread calls notify() or notifyAll() on the same object.

        - sleep() resumes after the specified sleep time expires or if interrupted.

_______________________________________________________________________________________

*   Explain notify() method in detail.

>>  The notify() method is used in inter-thread communication to wake up a single thread 
    that is waiting on an object's lock. 
    
    It must be called inside a synchronized block or method, otherwise, it throws 
    IllegalMonitorStateException.

    It does not release the lock immediately. The notified thread must wait until the 
    notifying thread exits the synchronized block.

    If no thread is waiting, notify() has no effect.

    How it Works:

        - A thread that calls wait() on an object releases the lock and enters the waiting state.

        - Another thread, after completing some task, calls notify() on the same object.

        - notify() wakes up only one of the waiting threads (randomly selected if multiple 
          threads are waiting).

        - The awakened thread still needs to re-acquire the object's lock before proceeding.

    Example:

        Task.class:

            ```
                class Task {
                    public synchronized void doTask() {
                        System.out.println("Task started...");
                        try {
                            wait();  // The thread waits here until it's notified
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        System.out.println("Task resumed after notification!");
                    }

                    public synchronized void completeTask() {
                        System.out.println("Task completed. Notifying...");
                        notify();  // Notify the waiting thread to continue
                    }
                }
            ```
        
        Main.class:

            ```
                public class Main {
                    public static void main(String[] args) {
                        Task task = new Task();

                        Thread t1 = new Thread(task::doTask);
                        Thread t2 = new Thread(task::completeTask);

                        t1.start();
                        
                        try {
                            Thread.sleep(3000);  // Simulate some delay before notifying
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        
                        t2.start();
                    }
                }
            ```

        Output:

            ```
                Task started...
                (Task is waiting...)
                Task completed. Notifying...
                Task resumed after notification!

            ```

_______________________________________________________________________________________

*   Explain notifyAll() method in detail.

>>  The notifyAll() method is similar to notify(), but instead of waking up just one 
    thread, it notifies all waiting threads.

    It is best suited when multiple threads are waiting, notifyAll() prevents indefinite 
    waiting (deadlocks).

    How it Works:

        - A thread that calls wait() on an object releases the lock and enters the 
          waiting state.

        - Another thread calls notifyAll() on the same object.

        - All waiting threads are awakened, but they must compete for the lock before 
          proceeding.

        - The first thread to acquire the lock continues execution, while others remain 
          in the runnable state.

_______________________________________________________________________________________

*   Explain interrupt() method in detail.

>>  The interrupt() method is used to interrupt a thread that is either sleeping, 
    waiting, or running. 
    
    It does not forcefully stop the thread but only sets the interrupt status flag of the 
    thread, signaling that it should stop execution or handle the interruption appropriately.

    - It is use to stop a thread gracefully instead of forcefully terminating it.

    How it Works:

        - If the thread is in sleep (sleep()), wait (wait()), or join (join()), 
          it throws an InterruptedException.

        - If the thread is running normally, it does not stop immediately; it only sets 
          an interrupt flag (Thread.interrupted() == true).

        - If a thread is already finished, interrupt() has no effect.

    Example: Interrupting a Sleeping Thread

        MyThread.class:

            ```
                class MyThread extends Thread {
                    public void run() {
                        try {
                            System.out.println("Thread is going to sleep...");
                            Thread.sleep(5000);  // Sleep for 5 seconds
                            System.out.println("Thread woke up normally.");
                        } catch (InterruptedException e) {
                            System.out.println("Thread was interrupted while sleeping!");
                        }
                    }
                }
            ```

        Main.class:

            ```
                public class Main {
                    public static void main(String[] args) {
                        MyThread t1 = new MyThread();
                        t1.start();

                        try {
                            Thread.sleep(2000);  // Main thread sleeps for 2 seconds
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        t1.interrupt();  // Interrupting t1 while it is sleeping
                    }
                }
            ```
        
        Output:

            ```
                Thread is going to sleep...
                (Thread sleeping for 2 seconds)
                Thread was interrupted while sleeping!
            ```

    Example: Interrupting a Running Thread

        MyThread.class:

            ```
                class MyThread extends Thread {
                    public void run() {
                        for (int i = 1; i <= 5; i++) {
                            System.out.println("Thread is running: " + i);
                            if (Thread.interrupted()) {
                                System.out.println("Thread is interrupted, stopping execution.");
                                return;
                            }
                        }
                    }
                }
            ```

        Main.class:

            ```
                public class Main {
                    public static void main(String[] args) {
                        MyThread t1 = new MyThread();
                        t1.start();

                        try {
                            Thread.sleep(10);  // Give the thread some time to run
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        t1.interrupt();  // Interrupt the thread
                    }
                }
            ```
        
        Output:

            ```
                Thread is running: 1
                Thread is running: 2
                Thread is interrupted, stopping execution.
            ```

_______________________________________________________________________________________
