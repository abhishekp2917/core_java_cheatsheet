*   Explain ExecutorService in detail.

>>  ExecutorService is an interface in Java that provides a higher-level replacement for managing 
    and controlling threads.

    Before ExecutorService, developers used to create threads like this:

        ```
            Thread thread = new Thread(() -> {
            // task
            });
            thread.start();
        ```

    This approach had many problems:

        - Manual thread management

        - No thread reuse leading to performance issues

        - No easy way to manage a pool of threads

        - No clean shutdown mechanism

    Why ExecutorService?
        
        - It abstracts away thread management and provides:

            - Thread pooling

            - Task scheduling

            - Graceful shutdown

    Example:

        Main.class:

            ```
                import java.util.concurrent.ExecutorService;
                import java.util.concurrent.Executors;

                public class Main {
                    public static void main(String[] args) {
                        // Create ExecutorService with 2 threads
                        ExecutorService service = Executors.newFixedThreadPool(2);

                        // Create tasks
                        Runnable task1 = () -> System.out.println("Task 1 executed by " + Thread.currentThread().getName());
                        Runnable task2 = () -> System.out.println("Task 2 executed by " + Thread.currentThread().getName());
                        Runnable task3 = () -> System.out.println("Task 3 executed by " + Thread.currentThread().getName());

                        // Submit tasks
                        service.submit(task1);
                        service.submit(task2);
                        service.submit(task3);

                        // Shutdown the service
                        service.shutdown();
                    }
                }
            ```
        
        Output:

            ```
                Task 1 executed by pool-1-thread-1
                Task 2 executed by pool-1-thread-2
                Task 3 executed by pool-1-thread-1
            ```

_______________________________________________________________________________________

*   What are various types of ThreadPools ?

>>  (1) Fixed Thread Pool

    (2) Cached Thread Pool

    (3) Single Thread Executor

    (4) Scheduled Thread Pool
    
_______________________________________________________________________________________

*   Explain Fixed Thread Pool in detail.

>>  A Fixed Thread Pool is a thread pool with a fixed number of worker threads.

    How it Works:

        - You submit a task using submit() or execute().

        - If fewer than nThreads are busy a thread picks up and runs the task.

        - If all threads are busy, the task is placed in a queue.

        - As threads finish current tasks, they pick new ones from the queue.

        - Threads are never destroyed â€” they remain alive.

    Example:

        Main.class:

            ```
                import java.util.concurrent.ExecutorService;
                import java.util.concurrent.Executors;

                public class Main {
                    public static void main(String[] args) {
                        ExecutorService executor = Executors.newFixedThreadPool(2);

                        for (int i = 1; i <= 4; i++) {
                            int taskId = i;
                            executor.submit(() -> {
                                System.out.println("Task " + taskId + " is running on " + Thread.currentThread().getName());
                                try {
                                    Thread.sleep(2000); // Simulate task duration
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                                System.out.println("Task " + taskId + " completed");
                            });
                        }
                        executor.shutdown(); // Important: Initiates shutdown after tasks complete
                    }
                }
            ```
    Output:

        ```
            Task 1 is running on pool-1-thread-1
            Task 2 is running on pool-1-thread-2
            Task 3 is running on pool-1-thread-1
            Task 1 completed
            Task 4 is running on pool-1-thread-2
            Task 2 completed
            Task 3 completed
            Task 4 completed
        ...

_______________________________________________________________________________________

*   Explain Cached Thread Pool in detail.

>>  A Cached Thread Pool is a thread pool that creates new threads as needed (no fixed size).

    How it Works:

        - You submit a task to the pool.

        - If there's an idle thread, it executes the task.

        - If no idle thread is available, it creates a new thread.

        - After completing a task, threads are kept alive for 60 seconds.

        - If they stay idle beyond that, they are terminated.

    Example:

        Main.class:

            ```
                import java.util.concurrent.ExecutorService;
                import java.util.concurrent.Executors;

                public class Main {
                    public static void main(String[] args) {
                        ExecutorService executor = Executors.newCachedThreadPool();

                        for (int i = 1; i <= 5; i++) {
                            int taskId = i;
                            executor.submit(() -> {
                                System.out.println("Task " + taskId + " running on " + Thread.currentThread().getName());
                                try {
                                    Thread.sleep(2000); // Simulate work
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                                System.out.println("Task " + taskId + " completed");
                            });
                        }

                        executor.shutdown();
                    }
                }
            ```
        
        Output:

            - All 5 tasks get their own threads immediately, unlike fixed thread pool 
              where only N threads run at once.4

            ```
                Task 1 running on pool-1-thread-1
                Task 2 running on pool-1-thread-2
                Task 3 running on pool-1-thread-3
                Task 4 running on pool-1-thread-4
                Task 5 running on pool-1-thread-5
            ```

_______________________________________________________________________________________

*   Explain Single Thread Executor in detail.

>>  A Single Thread Executor is an implementation of ExecutorService that uses a single 
    worker thread to execute tasks sequentially (FIFO).

    How it Works:

        - You submit tasks using submit() or execute().

        - If no task is currently running the thread picks up and executes the task.

        - If another task is running the task is placed into a queue.

        - Tasks are executed one-by-one, in the order they were submitted.

        - If the single thread dies due to an exception, it is replaced automatically.

    Example:

        Main.class:

            ```
                import java.util.concurrent.ExecutorService;
                import java.util.concurrent.Executors;

                public class Main {
                    public static void main(String[] args) {
                        ExecutorService executor = Executors.newSingleThreadExecutor();

                        for (int i = 1; i <= 3; i++) {
                            int taskId = i;
                            executor.submit(() -> {
                                System.out.println("Task " + taskId + " is running on " + Thread.currentThread().getName());
                                try {
                                    Thread.sleep(1000); // simulate some work
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                                System.out.println("Task " + taskId + " completed");
                            });
                        }

                        executor.shutdown();
                    }
                }
            ```
        
        Output:

            ```
                Task 1 is running on pool-1-thread-1
                Task 1 completed
                Task 2 is running on pool-1-thread-1
                Task 2 completed
                Task 3 is running on pool-1-thread-1
                Task 3 completed
            ```

_______________________________________________________________________________________

*   Explain Scheduled Thread Pool in detail.

>>  A Scheduled Thread Pool is an implementation of ScheduledExecutorService that allows 
    you to schedule tasks for one-time execution after a delay, or for repeated execution 
    at fixed intervals. 
    
    It supports delayed tasks, periodic tasks, and fixed-rate or fixed-delay execution.

    How it Works:

        - You create it using Executors.newScheduledThreadPool(int nThreads).

        - Tasks are submitted using methods like schedule(), scheduleAtFixedRate() or 
          scheduleWithFixedDelay()

        - Tasks are either:

            - Delayed and executed once

            - Repeated at fixed rate (based on start time)

            - Repeated with fixed delay (based on end time)

        - It uses a thread pool to execute tasks concurrently (if more than one thread is configured).

        - Internally manages a priority queue based on scheduled times.

    Example:
        
        Main.class:

            ```
                import java.util.concurrent.Executors;
                import java.util.concurrent.ScheduledExecutorService;
                import java.util.concurrent.TimeUnit;

                public class Main {
                    public static void main(String[] args) {
                        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(2);

                        Runnable task = () -> {
                            System.out.println("Running task on: " + Thread.currentThread().getName() + " at " + System.currentTimeMillis());
                        };

                        // Schedule task to run repeatedly with a fixed delay of 2 seconds after completion
                        scheduler.scheduleWithFixedDelay(task, 0, 2, TimeUnit.SECONDS);

                        // Optional: stop scheduler after some time
                        scheduler.schedule(() -> {
                            System.out.println("Shutting down...");
                            scheduler.shutdown();
                        }, 10, TimeUnit.SECONDS);
                    }
                }
            ```
        
        Output:

            ```
                Running task on: pool-1-thread-1 at 1713098430000
                Running task on: pool-1-thread-1 at 1713098432000
                Running task on: pool-1-thread-1 at 1713098434000
                Running task on: pool-1-thread-1 at 1713098436000
                Running task on: pool-1-thread-1 at 1713098438000
                Shutting down...
            ```

_______________________________________________________________________________________

*   Explain Future in detail.

>>  A Future represents the result of an asynchronous computation.
    
    It allows you to submit a task (via ExecutorService) and retrieve the result later, 
    once the task is complete.

    Key Features:

        - Submit a task that runs in background.

        - Call .get() to wait for the result.

        - Use .isDone() to check if the task is finished.

        - Use .cancel(true) or .cancel(false) to cancel the task.

    How to get a Future object:

        - Use ExecutorService.submit(Callable)
        
        - Callable is preferred here over Runnable because it returns a value.

    Example: 
            
        Main.class:

            ```
                import java.util.concurrent.*;

                public class Main {
                    public static void main(String[] args) {
                        // Create an ExecutorService (thread pool)
                        ExecutorService executor = Executors.newSingleThreadExecutor();

                        // Create a Callable task (returns a value)
                        Callable<String> callable = () -> {
                            Thread.sleep(3000); // simulate long task
                            return "Hello from Future!";
                        };

                        // Submit the callable and get a Future
                        Future<String> future = executor.submit(callable);

                        System.out.println("Task submitted...");

                        try {
                            // Do other stuff here if needed...

                            // Get the result (blocking)
                            String result = future.get();  // blocks until result is ready
                            System.out.println("Result: " + result);

                        } catch (InterruptedException | ExecutionException e) {
                            e.printStackTrace();
                        } finally {
                            executor.shutdown(); // always shutdown the executor
                        }
                    }
                }
            ```
        
        Output:

            ```
                Task submitted...
                (wait 3 seconds)
                Result: Hello from Future!
            ```

    Use Cases:
        
        - Making parallel API calls and combining results.

        - Submitting multiple background tasks using thread pool and waiting for all results.

_______________________________________________________________________________________

*   Explain FutureTask in detail.

>>  FutureTask is a concrete implementation of the Future interface that also implements 
    Runnable, so it can be executed by a thread or an ExecutorService, and returns a 
    result from a background computation.

    Why use FutureTask?

        - You want a Runnable task that returns a result.

        - You want to start a task manually using Thread.

        - You want more control (like cancel, re-checking result, or retrying).

    How it works:

        - You wrap a Callable inside a FutureTask.

        - You submit it to a thread (via Thread or ExecutorService).

        - Later, you call .get() to fetch the result.

    Example Using FutureTask with Runnable: 

        Main.class:

            ```
                import java.util.concurrent.*;

                public class Main {
                    public static void main(String[] args) {
                        // Create a Callable task
                        Callable<String> callable = () -> {
                            Thread.sleep(2000);
                            return "Result from Callable";
                        };

                        // Wrap it in a FutureTask
                        FutureTask<String> futureTask = new FutureTask<>(callable);

                        // Run it using a Thread (can also use ExecutorService)
                        Thread thread = new Thread(futureTask);
                        thread.start();

                        try {
                            System.out.println("Doing other work...");
                            // Get result (blocking)
                            String result = futureTask.get();
                            System.out.println("FutureTask Result: " + result);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            ```
        
        Output:

            ```
                Doing other work...
                (wait 2 seconds)
                FutureTask Result: Result from Callable
            ```
            
    Example Using FutureTask with Runnable + predefined result:

        Main.class:

            ```
                import java.util.concurrent.*;

                public class Main {
                    public static void main(String[] args) {
                        // Create a Runnable task
                        Runnable runnable = () -> {
                            System.out.println("Running a task...");
                        };

                        // Wrap it in a FutureTask with predefined result i.e. "DONE"
                        FutureTask<String> futureTask = new FutureTask<>(runnable, "DONE");

                        // Run it using a Thread (can also use ExecutorService)
                        Thread thread = new Thread(futureTask);
                        thread.start();

                        try {
                            // Get result (blocking)
                            String result = futureTask.get();
                            System.out.println("FutureTask Result: " + result);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            ```
        
        Output:

            ```
                Running a task...
                FutureTask Result: DONE
            ```

_______________________________________________________________________________________

*   What are the difference between Future and FutureTask ?

>>  (1) Type:

        - Future is an interface.
        
        - FutureTask is a concrete class that implements Future and Runnable.

    (2) Execution:

        - Future cannot be executed directly. It's returned by ExecutorService methods.

        - FutureTask can be executed directly by passing it to a Thread or ExecutorService since 
          it implements Runnable interface.

    (3) Result Handling

        - Future is just a handle to retrieve the result of a task.

        - FutureTask handles both task execution and result storage.

    (4) Reusability:

        - Future objects are created by the executor â€” you donâ€™t create them manually.

        - FutureTask gives you control to create and reuse tasks if needed.

    (5) Use Case:

        - Use Future when you're submitting tasks via ExecutorService and only need the result.

        - Use FutureTask when you want to manually create and control the task (e.g., 
          run it in a thread, cancel, retry, etc.).

_______________________________________________________________________________________

*   Explain shutdown() and shutdownNow() methods in detail.

>>  ExecutorService manages a pool of threads and To stop them, you use either shutdown()
    or shutdownNow().

    (1) shutdown():

        - Initiates an orderly shutdown.

        - Previously submitted tasks are executed, but no new tasks will be accepted.

        - Does not forcibly stop running threads.

        - Executor transitions to shutdown state, and eventually to terminated state 
          once all tasks are finished.

        Example:

            Main.class:

                ```
                    import java.util.concurrent.ExecutorService;
                    import java.util.concurrent.Executors;

                    public class Main {
                        public static void main(String[] args) {
                            ExecutorService executor = Executors.newFixedThreadPool(2);

                            // Submit 3 tasks
                            for (int i = 1; i <= 3; i++) {
                                final int taskId = i;

                                executor.submit(() -> {
                                    System.out.println("Task " + taskId + " started.");
                                    try {
                                        Thread.sleep(2000); // simulate work
                                    } catch (InterruptedException e) {
                                        System.out.println("Task " + taskId + " was interrupted.");
                                    }
                                    System.out.println("Task " + taskId + " finished.");
                                });
                            }

                            // Initiates graceful shutdown
                            executor.shutdown();

                            System.out.println("Executor shutdown called.");
                        }
                    }
                ```

            Output:

                ```
                    Task 1 started.
                    Task 2 started.
                    Executor shutdown called.
                    Task 1 finished.
                    Task 3 started.
                    Task 2 finished.
                    Task 3 finished.
                ```

    (2) shutdownNow():

        - Attempts to stop all actively executing tasks immediately.

        - Returns a list of tasks that were submitted but not yet started.

        - It interrupts all running threads, but actual interruption depends on how 
          tasks handle InterruptedException.

        Example: 

            Main.class:

                ```
                    import java.util.List;
                    import java.util.concurrent.ExecutorService;
                    import java.util.concurrent.Executors;

                    public class ShutdownNowExample {
                        public static void main(String[] args) {
                            ExecutorService executor = Executors.newFixedThreadPool(2);

                            // Submit 3 tasks
                            for (int i = 1; i <= 3; i++) {
                                final int taskId = i;

                                executor.submit(() -> {
                                    System.out.println("Task " + taskId + " started.");
                                    try {
                                        Thread.sleep(5000); // simulate long-running task
                                    } catch (InterruptedException e) {
                                        System.out.println("Task " + taskId + " was interrupted.");
                                    }
                                    System.out.println("Task " + taskId + " finished.");
                                });
                            }

                            // Wait a moment then force shutdown
                            try {
                                Thread.sleep(1000);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }

                            List<Runnable> notStarted = executor.shutdownNow();
                            System.out.println("shutdownNow() called. Pending tasks: " + notStarted.size());
                        }
                    }
                ```

            Output: 

                ```
                    Task 1 started.
                    Task 2 started.
                    shutdownNow() called. Pending tasks: 1
                    Task 1 was interrupted.
                    Task 2 was interrupted.
                    Task 1 finished.
                    Task 2 finished.
                ```

_______________________________________________________________________________________